1.为什么要学Lambda
    简约
2.Lambda 6大基础语法详解
    StudyLambda1.java  代码中详解

3.Lambda 4大内置核心函数式接口
    函数式接口：函数式接口就是只定义一个抽象方法的接口 @FunctionalInterface注解 这表示着该接口会设计成一个函数式接口，不符合规范的话，就会编译报错。
    4大内置函数
    类型              类                抽象方法                       解释
    消费型接口       Consumer<T>         void accept(T t);           （有来无回）将参数传入后做处理，无返回值
    供给型接口       Supplier<T>         T ger();                    （无来有回）无需传参并且有返回值
    函数型接口       Function<T,R>       R app1y(T t);               （有来有回）传入T参数返回R
    断言型接口       Predicate<T>        boolean test(T t);          传入一个参数返回一个boolean值
    StudyLambda2.java  代码中详解

4.方法应用、构造器引用的使用
    StudyLambda3.java  代码中详解

5.认识下强大的stream
    * Stream是Java8中处理集合的关键抽象概念，它可以指定你希望对
    * 集合进行的操作，可以执行非常复杂的查找、过滤和映射数据登操作。
    * 使用Stream Api对集合数据进行操作，就类似于使用SQL执行的数据
    * 库查询。也可以使用Stream Api来并行执行操作
    * <p>
    * 简而言之，StreamApi提供了一种高效且易于使用的处理数据方式
    StreamApi.java  代码中详解

6.Stream的并行流和串行流
    并行流就是把一个内容分成多个数据块，
    并用不同的线程分别处理每个数据块的流。
    java8中将并行进行了优化，我们可以很容易的对数据进行并行操作。
    Stream Api可以声明性的通过parallel()与sequential()在并行流与顺序流之间进行切换。

7.forkJoin和Stream并行流的关系
    ForkJoin并发框架
        从JDK1.7开始，java提供ForkJoin框架用于并行执行任务，他的思想就是将一个大人物分割成若干个小任务，
        最终汇总每个小任务的结果得到这个大任务的结果
        两个特性：递归分治、工作密取
        举例：
            求1加到一亿的值。使用单线程的话就是1+2+3+4...+1亿
            使用ForkJoin的话就是1+2..+1000万（第一个线程）、1000万零一+1000万零2..2000万（第二个线程）。。。
            多个线程结果累加得出结论。
